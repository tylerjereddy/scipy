trigger:
  # start a new build for every push
  batch: False
  branches:
    include:
      - main
      - maintenance/*
  paths:
    include:
      - '*'
    exclude:
      - 'benchmarks/*'
      - './*.txt'
      - 'site.cfg.example'

pr:
  branches:
    include:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string

# the version of OpenBLAS used is currently 0.3.21
# and should be updated to match scipy-wheels as appropriate
variables:
    openblas_version: 0.3.21.dev
    pre_wheels: https://pypi.anaconda.org/scipy-wheels-nightly/simple
    CCACHE_DIR: $(Pipeline.Workspace)/ccache
    SCIPY_AVAILABLE_MEM: 3G
    NPY_NUM_BUILD_JOBS: 2
    CCACHE_COMPRESS: 1
    # Using a single thread can actually speed up some computations
    OPENBLAS_NUM_THREADS: 1

stages:

- stage: Main
  variables:
    AZURE_CI: 'true'
  jobs:
  - job: Windows
    timeoutInMinutes: 90
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/main'))  # skip for PR merges
    pool:
      vmImage: 'windows-2019'
    variables:
      # OPENBLAS64_ variable has same value
      # but only needed for ILP64 build below
      OPENBLAS: '$(Agent.HomeDirectory)\openblaslib'
    strategy:
      maxParallel: 4
      matrix:
          Python39-64bit-full:
            PYTHON_VERSION: '3.9'
            PYTHON_ARCH: 'x64'
            TEST_MODE: full
            BITS: 64
            SCIPY_USE_PYTHRAN: 0
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(PYTHON_VERSION)
        addToPath: true
        architecture: $(PYTHON_ARCH)
    - script: |
        git submodule update --init
      displayName: 'Fetch submodules'
    - script: |
        python -m pip install --upgrade pip "setuptools==59.6.0" wheel
      displayName: 'Install tools'
    - powershell: |
        $pyversion = python -c "import sys; print(sys.version.split()[0])"
        Write-Host "Python Version: $pyversion"
        function Download-OpenBLAS($ilp64) {
            if ($ilp64 -eq '1') { $target_name = "openblas64_.a" } else { $target_name = "openblas.a" }
            $target = "$(OPENBLAS)\$target_name"
            Write-Host "target path: $target"
            $old_value = $env:NPY_USE_BLAS_ILP64
            $env:NPY_USE_BLAS_ILP64 = $ilp64
            $openblas = python tools/openblas_support.py
            $env:NPY_USE_BLAS_ILP64 = $old_value
            cp $openblas $target
        }
        mkdir $(OPENBLAS)
        Download-OpenBLAS('0')
        If ($env:NPY_USE_BLAS_ILP64 -eq '1') {
            Download-OpenBLAS('1')
        }
      displayName: 'Download / Install OpenBLAS'

    - powershell: |
        # wheels must use same version
        choco install -y mingw rtools
      displayName: 'Install 64-bit mingw for 64-bit builds'
      condition: and(succeeded(), eq(variables['BITS'], 64))

    - script: |
        # provides clang-cl, which is required by Pythran
        choco install -y llvm
        set PATH=C:\Program Files\LLVM\bin;%PATH%
        echo '##vso[task.setvariable variable=PATH]%PATH%'
      displayName: 'Install clang-cl'
    - script: |
        clang-cl.exe --version
      displayName: 'clang-cl version'

    - powershell: |
        # wheels must use same version
        choco install -y mingw --forcex86 --force --version=8.1.0
      displayName: 'Install 32-bit mingw for 32-bit builds'
      condition: and(succeeded(), eq(variables['BITS'], 32))

    - script: >-
        python -m pip install
        cython==0.29.33
        matplotlib
        mpmath
        numpy==1.23.5
        Pillow
        pybind11
        pythran==0.12.0
        pytest
        pytest-cov
        pytest-env
        pytest-timeout
        pytest-xdist
        threadpoolctl
        pooch
      displayName: 'Install dependencies'
    # DLL resolution mechanics were changed in
    # Python 3.9: https://bugs.python.org/issue36085
    # While we normally leave adjustment of _distributor_init.py
    # up to the specific distributors of SciPy builds, we
    # are the primary providers of the SciPy wheels available
    # on PyPI, so we now regularly test that the version of
    # _distributor_init.py in our wheels repo is capable of
    # loading the DLLs from a master branch wheel build
    - powershell: |
        git clone -n --depth 1 https://github.com/MacPython/scipy-wheels.git
        cd scipy-wheels
        git checkout HEAD _distributor_init.py
        cd ..
        rm scipy/_distributor_init.py
        mv scipy-wheels/_distributor_init.py scipy/
      displayName: 'Copy in _distributor_init.py'
      condition: and(succeeded(), eq(variables['PYTHON_VERSION'], '3.9'))
    - powershell: |
        # The below lines ensure exit status of every line in this step is checked
        Set-StrictMode -Version Latest
        $global:erroractionpreference = 1

        If ($(BITS) -eq 32) {
            # 32-bit build requires careful adjustments
            # until Microsoft has a switch we can use
            # directly for i686 mingw
            $env:NPY_DISTUTILS_APPEND_FLAGS = 1
            $env:CFLAGS = "-m32"
            $env:CXXFLAGS = "-m32"
            $env:LDFLAGS = "-m32"

            $env:PATH = "C:\\ProgramData\\chocolatey\\lib\\mingw\\tools\\install\\mingw$(BITS)\\bin;" + $env:PATH
            refreshenv
        }
        Else
        {
            $env:PATH = "C:\\rtools40\\ucrt64\\bin;" + $env:PATH
        }
        $env:SCIPY_USE_PYTHRAN=$(SCIPY_USE_PYTHRAN)

        # Still testing distutils here (`pip wheel --no-use-pep517` cannot be
        # used, so back to `setup.py` it is ...)
        python setup.py bdist_wheel
        ls dist -r | Foreach-Object {
            pip install $_.FullName
        }
      displayName: 'Build SciPy'
    - powershell: |
        If ($(BITS) -eq 32) {
            $env:PATH = "C:\\ProgramData\\chocolatey\\lib\\mingw\\tools\\install\\mingw$(BITS)\\bin;" + $env:PATH
            refreshenv
        }
        Else
        {
            $env:PATH = "C:\\rtools40\\ucrt64\\bin;" + $env:PATH
        }
        python runtests.py -n --mode=$(TEST_MODE) -- -n 2 --junitxml=junit/test-results.xml --durations=10 --timeout=60
      displayName: 'Run SciPy Test Suite'
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/test-*.xml'
        failTaskOnFailedTests: true
        testRunTitle: 'Publish test results for Python $(python.version)'
